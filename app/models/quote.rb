class Quote < ActiveRecord::Base
  attr_accessible :price, :quantity
  
  belongs_to :product
  belongs_to :vendor
  
  validates :price, :presence => true
  validates :quantity, :presence => true
  
  class << self; attr_accessor :sort_columns, :default_sort_columns; end
  
  SORT_ASC                = 'ASC'
  SORT_DESC               = 'DESC'
  DEFAULT_SORT_DIRECTION  = SORT_ASC
  VALID_SORT_DIRECTIONS   = [SORT_ASC, SORT_DESC]
  
  # this is what will eventually be generated by the library when you do the call to sortable
  @sort_columns = {
    :price        => {:column_name => :price,     :default => 'ASC',  :joins => nil,      :clause => 'quotes.price'},
    :quantity     => {:column_name => :quantity,  :default => nil,    :joins => nil,      :clause => 'quotes.quantity'},
    :vendor_name  => {:column_name => :name,      :default => nil,    :joins => :vendor,  :clause => 'vendors.name'},
    :product_name => {:column_name => :name,      :default => nil,    :joins => :product, :clause => 'products.name'}
  }
  
  # this is what will be generated by the library method once sortable is implemented
  @default_sort_columns = {
    :price    => 'quotes.price ASC'
  }
  
  def self.sort(sort_column = nil, sort_direction = DEFAULT_SORT_DIRECTION)
    query = self.scoped
    
    # sanitize the sort column and direction
    sort_column     = sort_column.to_s.downcase.to_sym
    sort_direction  = sort_direction.upcase
    sort_direction  = (VALID_SORT_DIRECTIONS.include?(sort_direction) ? sort_direction : DEFAULT_SORT_DIRECTION)
    
    table_joins   = []
    order_clauses = []
    
    if !sort_column.blank? && sort_columns.include?(sort_column)      
      join = sort_columns[sort_column][:joins]
      table_joins   << join unless join.nil?
      order_clauses << "#{sort_columns[sort_column][:clause]} #{sort_direction}"
    end
    
    default_sorts = default_sort_columns.clone
    default_sorts.delete(sort_column) unless sort_column.blank? # remove the sort column's default if it exists
    
    default_sorts.each do |column_name, sort_clause|
      join = sort_columns[column_name][:joins]
      tables_joins  << join unless join.nil?
      order_clauses << sort_clause
    end
    
    table_joins.uniq!
    query = query.joins(table_joins) unless table_joins.empty?
    
    query = query.order(order_clauses.join(', '))
    
    query
  end
end
